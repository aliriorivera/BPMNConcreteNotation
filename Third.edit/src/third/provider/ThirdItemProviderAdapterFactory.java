/**
 */
package third.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import third.util.ThirdAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ThirdItemProviderAdapterFactory extends ThirdAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable
{
  /**
   * This keeps track of the root adapter factory that delegates to this adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ComposedAdapterFactory parentAdapterFactory;

  /**
   * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IChangeNotifier changeNotifier = new ChangeNotifier();

  /**
   * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Collection<Object> supportedTypes = new ArrayList<Object>();

  /**
   * This constructs an instance.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ThirdItemProviderAdapterFactory()
  {
    supportedTypes.add(IEditingDomainItemProvider.class);
    supportedTypes.add(IStructuredItemContentProvider.class);
    supportedTypes.add(ITreeItemContentProvider.class);
    supportedTypes.add(IItemLabelProvider.class);
    supportedTypes.add(IItemPropertySource.class);
  }

  /**
   * This keeps track of the one adapter used for all {@link third.SimpleBPMN} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SimpleBPMNItemProvider simpleBPMNItemProvider;

  /**
   * This creates an adapter for a {@link third.SimpleBPMN}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createSimpleBPMNAdapter()
  {
    if (simpleBPMNItemProvider == null)
    {
      simpleBPMNItemProvider = new SimpleBPMNItemProvider(this);
    }

    return simpleBPMNItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link third.Start} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected StartItemProvider startItemProvider;

  /**
   * This creates an adapter for a {@link third.Start}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createStartAdapter()
  {
    if (startItemProvider == null)
    {
      startItemProvider = new StartItemProvider(this);
    }

    return startItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link third.End} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EndItemProvider endItemProvider;

  /**
   * This creates an adapter for a {@link third.End}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createEndAdapter()
  {
    if (endItemProvider == null)
    {
      endItemProvider = new EndItemProvider(this);
    }

    return endItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link third.Message} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MessageItemProvider messageItemProvider;

  /**
   * This creates an adapter for a {@link third.Message}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createMessageAdapter()
  {
    if (messageItemProvider == null)
    {
      messageItemProvider = new MessageItemProvider(this);
    }

    return messageItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link third.Normal} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected NormalItemProvider normalItemProvider;

  /**
   * This creates an adapter for a {@link third.Normal}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createNormalAdapter()
  {
    if (normalItemProvider == null)
    {
      normalItemProvider = new NormalItemProvider(this);
    }

    return normalItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link third.Extended} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExtendedItemProvider extendedItemProvider;

  /**
   * This creates an adapter for a {@link third.Extended}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createExtendedAdapter()
  {
    if (extendedItemProvider == null)
    {
      extendedItemProvider = new ExtendedItemProvider(this);
    }

    return extendedItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link third.NormalF} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected NormalFItemProvider normalFItemProvider;

  /**
   * This creates an adapter for a {@link third.NormalF}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createNormalFAdapter()
  {
    if (normalFItemProvider == null)
    {
      normalFItemProvider = new NormalFItemProvider(this);
    }

    return normalFItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link third.Input} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected InputItemProvider inputItemProvider;

  /**
   * This creates an adapter for a {@link third.Input}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createInputAdapter()
  {
    if (inputItemProvider == null)
    {
      inputItemProvider = new InputItemProvider(this);
    }

    return inputItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link third.Output} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected OutputItemProvider outputItemProvider;

  /**
   * This creates an adapter for a {@link third.Output}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createOutputAdapter()
  {
    if (outputItemProvider == null)
    {
      outputItemProvider = new OutputItemProvider(this);
    }

    return outputItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link third.ConditionalIN} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConditionalINItemProvider conditionalINItemProvider;

  /**
   * This creates an adapter for a {@link third.ConditionalIN}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createConditionalINAdapter()
  {
    if (conditionalINItemProvider == null)
    {
      conditionalINItemProvider = new ConditionalINItemProvider(this);
    }

    return conditionalINItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link third.ConditionalINOUT} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConditionalINOUTItemProvider conditionalINOUTItemProvider;

  /**
   * This creates an adapter for a {@link third.ConditionalINOUT}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createConditionalINOUTAdapter()
  {
    if (conditionalINOUTItemProvider == null)
    {
      conditionalINOUTItemProvider = new ConditionalINOUTItemProvider(this);
    }

    return conditionalINOUTItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link third.Interval} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IntervalItemProvider intervalItemProvider;

  /**
   * This creates an adapter for a {@link third.Interval}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createIntervalAdapter()
  {
    if (intervalItemProvider == null)
    {
      intervalItemProvider = new IntervalItemProvider(this);
    }

    return intervalItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link third.Date} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DateItemProvider dateItemProvider;

  /**
   * This creates an adapter for a {@link third.Date}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createDateAdapter()
  {
    if (dateItemProvider == null)
    {
      dateItemProvider = new DateItemProvider(this);
    }

    return dateItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link third.Descripcion} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DescripcionItemProvider descripcionItemProvider;

  /**
   * This creates an adapter for a {@link third.Descripcion}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createDescripcionAdapter()
  {
    if (descripcionItemProvider == null)
    {
      descripcionItemProvider = new DescripcionItemProvider(this);
    }

    return descripcionItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link third.ParticipantETSK} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ParticipantETSKItemProvider participantETSKItemProvider;

  /**
   * This creates an adapter for a {@link third.ParticipantETSK}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createParticipantETSKAdapter()
  {
    if (participantETSKItemProvider == null)
    {
      participantETSKItemProvider = new ParticipantETSKItemProvider(this);
    }

    return participantETSKItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link third.datainETSK} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected datainETSKItemProvider datainETSKItemProvider;

  /**
   * This creates an adapter for a {@link third.datainETSK}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createdatainETSKAdapter()
  {
    if (datainETSKItemProvider == null)
    {
      datainETSKItemProvider = new datainETSKItemProvider(this);
    }

    return datainETSKItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link third.dataoutETSK} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected dataoutETSKItemProvider dataoutETSKItemProvider;

  /**
   * This creates an adapter for a {@link third.dataoutETSK}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createdataoutETSKAdapter()
  {
    if (dataoutETSKItemProvider == null)
    {
      dataoutETSKItemProvider = new dataoutETSKItemProvider(this);
    }

    return dataoutETSKItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link third.DateETSK} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DateETSKItemProvider dateETSKItemProvider;

  /**
   * This creates an adapter for a {@link third.DateETSK}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createDateETSKAdapter()
  {
    if (dateETSKItemProvider == null)
    {
      dateETSKItemProvider = new DateETSKItemProvider(this);
    }

    return dateETSKItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link third.Nodes} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected NodesItemProvider nodesItemProvider;

  /**
   * This creates an adapter for a {@link third.Nodes}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createNodesAdapter()
  {
    if (nodesItemProvider == null)
    {
      nodesItemProvider = new NodesItemProvider(this);
    }

    return nodesItemProvider;
  }

  /**
   * This returns the root adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComposeableAdapterFactory getRootAdapterFactory()
  {
    return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
  }

  /**
   * This sets the composed adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory)
  {
    this.parentAdapterFactory = parentAdapterFactory;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object type)
  {
    return supportedTypes.contains(type) || super.isFactoryForType(type);
  }

  /**
   * This implementation substitutes the factory itself as the key for the adapter.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter adapt(Notifier notifier, Object type)
  {
    return super.adapt(notifier, this);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object adapt(Object object, Object type)
  {
    if (isFactoryForType(type))
    {
      Object adapter = super.adapt(object, type);
      if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter)))
      {
        return adapter;
      }
    }

    return null;
  }

  /**
   * This adds a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void addListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.addListener(notifyChangedListener);
  }

  /**
   * This removes a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void removeListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.removeListener(notifyChangedListener);
  }

  /**
   * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void fireNotifyChanged(Notification notification)
  {
    changeNotifier.fireNotifyChanged(notification);

    if (parentAdapterFactory != null)
    {
      parentAdapterFactory.fireNotifyChanged(notification);
    }
  }

  /**
   * This disposes all of the item providers created by this factory. 
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void dispose()
  {
    if (simpleBPMNItemProvider != null) simpleBPMNItemProvider.dispose();
    if (startItemProvider != null) startItemProvider.dispose();
    if (endItemProvider != null) endItemProvider.dispose();
    if (messageItemProvider != null) messageItemProvider.dispose();
    if (normalItemProvider != null) normalItemProvider.dispose();
    if (extendedItemProvider != null) extendedItemProvider.dispose();
    if (normalFItemProvider != null) normalFItemProvider.dispose();
    if (inputItemProvider != null) inputItemProvider.dispose();
    if (outputItemProvider != null) outputItemProvider.dispose();
    if (conditionalINItemProvider != null) conditionalINItemProvider.dispose();
    if (conditionalINOUTItemProvider != null) conditionalINOUTItemProvider.dispose();
    if (intervalItemProvider != null) intervalItemProvider.dispose();
    if (dateItemProvider != null) dateItemProvider.dispose();
    if (descripcionItemProvider != null) descripcionItemProvider.dispose();
    if (participantETSKItemProvider != null) participantETSKItemProvider.dispose();
    if (datainETSKItemProvider != null) datainETSKItemProvider.dispose();
    if (dataoutETSKItemProvider != null) dataoutETSKItemProvider.dispose();
    if (dateETSKItemProvider != null) dateETSKItemProvider.dispose();
    if (nodesItemProvider != null) nodesItemProvider.dispose();
  }

}
